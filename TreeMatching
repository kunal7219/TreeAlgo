#include <bits/stdc++.h>
using namespace std;
#define ll long long
 
/* UTILS */
#define M 1000000007
#define PI 3.1415926535897932384626433832795
ll min(ll a,int b) { if (a<b) return a; return b; }
ll min(int a,ll b) { if (a<b) return a; return b; }
ll max(ll a,int b) { if (a>b) return a; return b; }
ll max(int a,ll b) { if (a>b) return a; return b; }
ll gcd(ll a,ll b) { if (b==0) return a; return gcd(b, a%b); }
ll lcm(ll a,ll b) { return a/gcd(a,b)*b; }
bool prime(ll a) { if (a==1) return 0; for (int i=2;i<=round(sqrt(a));++i) if (a%i==0) return 0; return 1; }
void yes() { cout<<"YES\n"; }
void no() { cout<<"NO\n"; }
 
/*  All Required define Pre-Processors and typedef Constants */
typedef long int int32;
typedef unsigned long int uint32;
typedef long long int int64;
typedef unsigned long long int  uint64;
/* clang-format on */
vector<int> adj[200001];
int dp[200001][2];
void solve(int src,int par){
	vector<int>prefix,suffix;
	dp[src][0]=dp[src][1]=0;
	bool leaf=1;
	for(auto child:adj[src]){
		if(child==par)continue;
		leaf=0;
		solve(child,src);
	}
	if(leaf)return;
	for(auto child:adj[src]){
		if(child!=par){
			prefix.push_back(max(dp[child][0],dp[child][1]));
			suffix.push_back(max(dp[child][0],dp[child][1]));
		}
	}
	int n=prefix.size();
	for(int i=1;i<n;i++)prefix[i]+=prefix[i-1];
	for(int i=n-2;i>=0;i--)suffix[i]+=suffix[i+1];
 
	dp[src][0]=suffix[0];
	int c_no=0;
	for(auto child:adj[src]){
		if(child==par)continue;
		int left=(c_no==0)?0:prefix[c_no-1];
		int right=(c_no==n-1)?0:suffix[c_no+1];
		dp[src][1]=max(dp[src][1],1+left+right+dp[child][0]);
		c_no++;
	}
}
void dude(){
	int n;
	cin>>n;
	for(int i=0;i<n-1;i++){
		int u,v;cin>>u>>v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	solve(1,0);
	cout<<max(dp[1][0],dp[1][1])<<endl;
}
/* Main()  function */
int main()
{
	#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
int t=1;
//cin>>t;
while(t--){
	dude();
}
 
return 0;
}
