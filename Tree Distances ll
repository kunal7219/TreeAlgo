#include <bits/stdc++.h>
using namespace std;
#define ll long long
 
/* UTILS */
#define M 1000000007
#define PI 3.1415926535897932384626433832795
ll min(ll a,int b) { if (a<b) return a; return b; }
ll min(int a,ll b) { if (a<b) return a; return b; }
ll max(ll a,int b) { if (a>b) return a; return b; }
ll max(int a,ll b) { if (a>b) return a; return b; }
ll gcd(ll a,ll b) { if (b==0) return a; return gcd(b, a%b); }
ll lcm(ll a,ll b) { return a/gcd(a,b)*b; }
bool prime(ll a) { if (a==1) return 0; for (int i=2;i<=round(sqrt(a));++i) if (a%i==0) return 0; return 1; }
void yes() { cout<<"YES\n"; }
void no() { cout<<"NO\n"; }
using pi=pair<ll,ll>;
const ll nax=200005;
vector<ll> adj[nax];
vector<ll> ans(nax);
ll nodes[nax],subTreeAns[nax];
void dfs(ll src, ll par)
{
    ll noOfnodes = 1;
    ll sumSubTree=0;
    for(ll child : adj[src])
    {
        if(child != par)
        {
            dfs(child, src);
            noOfnodes+=nodes[child];
            sumSubTree+=(subTreeAns[child]+nodes[child]);
        }
    }
    nodes[src]=noOfnodes;
    subTreeAns[src]=sumSubTree;
}
void dfs1(ll src,ll par,ll par_ans,ll totalNode){
	ans[src]=subTreeAns[src]+par_ans+(totalNode-nodes[src]);
	for(auto child:adj[src]){
		if(child!=par){
			ll partial_ans=ans[src]-(subTreeAns[child]+nodes[child]);
			dfs1(child,src,partial_ans,totalNode);
		}
	}
	}
void dude(){
	ll n;
	cin>>n;
	for(int i=0;i<n-1;i++){
		int u,v;cin>>u>>v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	dfs(1,0);
	dfs1(1,0,0,n);
	for(int i=1;i<=n;i++)cout<<ans[i]<<" ";
}
/* Main()  function */
int main()
{
int t=1;
//cin>>t;
while(t--){
	dude();
}
 
return 0;
}
