#include <bits/stdc++.h>
using namespace std;
#define ll long long
 
/* UTILS */
#define M 1000000007
#define PI 3.1415926535897932384626433832795
ll min(ll a,int b) { if (a<b) return a; return b; }
ll min(int a,ll b) { if (a<b) return a; return b; }
ll max(ll a,int b) { if (a>b) return a; return b; }
ll max(int a,ll b) { if (a>b) return a; return b; }
ll gcd(ll a,ll b) { if (b==0) return a; return gcd(b, a%b); }
ll lcm(ll a,ll b) { return a/gcd(a,b)*b; }
bool prime(ll a) { if (a==1) return 0; for (int i=2;i<=round(sqrt(a));++i) if (a%i==0) return 0; return 1; }
void yes() { cout<<"YES\n"; }
void no() { cout<<"NO\n"; }
using pi=pair<ll,ll>;
const int nax=200005;
vector<int> adj[nax];
vector<int> ans(nax);
int depth[200001];
void dfs(int src, int par)
{
    int bestChildDownPath = 0;
    for(int child : adj[src])
    {
        if(child != par)
        {
            dfs(child, src);
            bestChildDownPath = max(bestChildDownPath,1 + depth[child]);
        }
    }
    depth[src] = bestChildDownPath;
}
void dfs1(int src,int par,int par_ans){
	vector<int> prefixMax,suffixMax;
	// get depth of childs
	for(auto it:adj[src]){
		if(it==par)continue;
		prefixMax.push_back(depth[it]);
		suffixMax.push_back(depth[it]);
	}
	// building prefix and suffix max
	for(int i=1;i<prefixMax.size();i++){
		prefixMax[i]=max(prefixMax[i],prefixMax[i-1]);
	}
	for(int i=(int)suffixMax.size()-2;i>=0;i--){
		suffixMax[i]=max(suffixMax[i],suffixMax[i+1]);
	}
	// eval ans for every child c_no
	int c_no=0;
	for(auto it:adj[src]){
		if(it!=par){
			int op1=(c_no==0)?INT_MIN:prefixMax[c_no-1];
			int op2=(c_no==(suffixMax.size()-1))?INT_MIN:suffixMax[c_no+1];
			int partial_ans=1+max(par_ans,max(op1,op2));
			dfs1(it,src,partial_ans);
			c_no++;
		}
	}
	// calculate ans for src
	ans[src]=1+max(par_ans,(prefixMax.empty())? -1 : prefixMax.back());
}
void dude(){
	int n;
	cin>>n;
	for(int i=0;i<n-1;i++){
		int u,v;cin>>u>>v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	dfs(1,0);
	dfs1(1,0,-1);
	for(int i=1;i<=n;i++)cout<<ans[i]<<" ";
}
/* Main()  function */
int main()
{
int t=1;
//cin>>t;
while(t--){
	dude();
}
 
return 0;
}
