#include <bits/stdc++.h>
using namespace std;
#define ll long long

vector<vector<int>> dp;
const int LOG=20;
const int max_n=200001;
vector<int>adj[max_n];
vector<int> depth;
void dfs(int a,int par){
    for(auto b:adj[a]){
        if(b==par)continue;
        dp[b][0]=a;
        depth[b]=depth[a]+1;
        dfs(b,a);
    }
}
int lca(int a,int b){

    if(depth[a]<depth[b])swap(a,b);

        int k=depth[a]-depth[b];
        for(int j=LOG-1;j>=0;j--){
            if(k&(1<<j)){
                a=dp[a][j];
            }
        }
        if(a==b){
        return a;
        }
        for(int j=LOG-1;j>=0;j--){
            if(dp[a][j]!=-1 && dp[a][j]!=dp[b][j]){
                a=dp[a][j];
                b=dp[b][j];
            }
        }
        return dp[a][0];
}

void solve(){
    int n,q;
    cin>>n>>q;
    depth.resize(n,0);
    dp.resize(n,vector<int>(LOG,-1));
    for(int i=0;i<n-1;i++){
        int x,y;cin>>x>>y;
        x--;y--;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
    dfs(0,-1);
    for(int j=1;j<=LOG;j++){
        for(int i=0;i<n;i++){
            if(dp[i][j-1]!=-1)
            dp[i][j]=dp[dp[i][j-1]][j-1];
        }
    }
    while(q--){
        int a,b;
        cin>>a>>b;
        int p=lca(--a,--b);

        cout<<depth[a]+depth[b]-2*depth[p]<<endl;
    }
    }
/* Main()  function */
int main()
{
	 cin.tie(nullptr)->sync_with_stdio(false);
solve();
return 0;
}
